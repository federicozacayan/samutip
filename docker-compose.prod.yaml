version: '3'

services:
# PROXI
  nginx-proxy:
    image: jwilder/nginx-proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - certs:/etc/nginx/certs:ro
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
    labels:
      - com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy

# LETSENCRIPT
  letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    environment:
      - NGINX_PROXY_CONTAINER=nginx-proxy
    volumes:
      - certs:/etc/nginx/certs:rw
      - vhostd:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro

# NODE JS  
  node:
    build: .
    image: samu_node
    container_name: node
    working_dir: /usr/src/app
    env_file:
      - config/.env
    volumes:
      - ./:/usr/src/app
      - /usr/src/app/node_modules
    expose:
      - "80"
    command: bash -c "npm run start"
    networks:
      - samutips
    depends_on:
      - db
      - nginx-proxy
      - letsencrypt

# POSTGRES
  db:
    image: postgres:12
    restart: always
    container_name: samu_pg
    env_file:
      - config/.env
    expose:
      - "5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./config/init.sql:/docker-entrypoint-initdb.d/10-init.sql
    networks:
      - samutips
    
networks:
    samutips:
    
volumes: 
  certs:
  html:
  vhostd: